{"version":3,"sources":["../../src/services/testData.service.ts"],"sourcesContent":["// REQUIRED TO IMPORT\nimport { HttpException } from '@exceptions/HttpException';\nimport { isEmpty } from '@utils/util';\n// Import the interface\nimport { TestData } from '@/interfaces/testData.interface';\n// Import the model\nimport testDataModel from '@/models/testData.model';\n\nclass TestDataService {\n  public testData = testDataModel;\n\n  public async findAllTestData(): Promise<TestData[]> {\n    const testData: TestData[] = await this.testData.find();\n    return testData;\n  }\n\n  public async findTestDataById(testDataId: string): Promise<TestData> {\n    if (isEmpty(testDataId)) throw new HttpException(400, 'TestDataId is empty');\n\n    const findTestData: TestData = await this.testData.findOne({ _id: testDataId });\n    if (!findTestData) throw new HttpException(409, \"TestData doesn't exist\");\n\n    return findTestData;\n  }\n\n  public async createTestData(testData: Object): Promise<TestData> {\n    if (isEmpty(testData)) throw new HttpException(400, 'TestData is empty');\n\n    const createUserData: TestData = await this.testData.create({ ...testData });\n\n    return createUserData;\n  }\n\n  public async updateTestData(testDataId: string, testData: Object): Promise<TestData> {\n    if (isEmpty(testData)) throw new HttpException(400, 'testData is empty');\n\n    const updateTestDataById: TestData = await this.testData.findByIdAndUpdate(testDataId, testData, { new: true });\n    if (!updateTestDataById) throw new HttpException(409, \"TestData doesn't exist\");\n\n    return updateTestDataById;\n  }\n\n  public async deleteTestData(testDataId: string): Promise<TestData> {\n    const deleteTestDataById: TestData = await this.testData.findByIdAndDelete(testDataId);\n    if (!deleteTestDataById) throw new HttpException(409, \"TestData doesn't exist\");\n\n    return deleteTestDataById;\n  }\n}\n\nexport default TestDataService;\n"],"names":["TestDataService","findAllTestData","testData","find","findTestDataById","testDataId","isEmpty","HttpException","findTestData","findOne","_id","createTestData","createUserData","create","updateTestData","updateTestDataById","findByIdAndUpdate","new","deleteTestData","deleteTestDataById","findByIdAndDelete","testDataModel"],"mappings":"AACA;;;;+BAiDA,SAA+B;;aAA/B,QAA+B;;+BAjDD,6BAA2B;sBACjC,eAAa;sDAIX,0BAAyB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEnD,IAAA,AAAMA,eAAe,GAArB,MAAMA,eAAe;UAGNC,eAAe,GAAwB;QAClD,MAAMC,QAAQ,GAAe,MAAM,IAAI,CAACA,QAAQ,CAACC,IAAI,EAAE,AAAC;QACxD,OAAOD,QAAQ,CAAC;IAClB;UAEaE,gBAAgB,CAACC,UAAkB,EAAqB;QACnE,IAAIC,IAAAA,KAAO,QAAA,EAACD,UAAU,CAAC,EAAE,MAAM,IAAIE,cAAa,cAAA,CAAC,GAAG,EAAE,qBAAqB,CAAC,CAAC;QAE7E,MAAMC,YAAY,GAAa,MAAM,IAAI,CAACN,QAAQ,CAACO,OAAO,CAAC;YAAEC,GAAG,EAAEL,UAAU;SAAE,CAAC,AAAC;QAChF,IAAI,CAACG,YAAY,EAAE,MAAM,IAAID,cAAa,cAAA,CAAC,GAAG,EAAE,wBAAwB,CAAC,CAAC;QAE1E,OAAOC,YAAY,CAAC;IACtB;UAEaG,cAAc,CAACT,QAAgB,EAAqB;QAC/D,IAAII,IAAAA,KAAO,QAAA,EAACJ,QAAQ,CAAC,EAAE,MAAM,IAAIK,cAAa,cAAA,CAAC,GAAG,EAAE,mBAAmB,CAAC,CAAC;QAEzE,MAAMK,cAAc,GAAa,MAAM,IAAI,CAACV,QAAQ,CAACW,MAAM,CAAC,kBAAKX,QAAQ,CAAE,CAAC,AAAC;QAE7E,OAAOU,cAAc,CAAC;IACxB;UAEaE,cAAc,CAACT,UAAkB,EAAEH,QAAgB,EAAqB;QACnF,IAAII,IAAAA,KAAO,QAAA,EAACJ,QAAQ,CAAC,EAAE,MAAM,IAAIK,cAAa,cAAA,CAAC,GAAG,EAAE,mBAAmB,CAAC,CAAC;QAEzE,MAAMQ,kBAAkB,GAAa,MAAM,IAAI,CAACb,QAAQ,CAACc,iBAAiB,CAACX,UAAU,EAAEH,QAAQ,EAAE;YAAEe,GAAG,EAAE,IAAI;SAAE,CAAC,AAAC;QAChH,IAAI,CAACF,kBAAkB,EAAE,MAAM,IAAIR,cAAa,cAAA,CAAC,GAAG,EAAE,wBAAwB,CAAC,CAAC;QAEhF,OAAOQ,kBAAkB,CAAC;IAC5B;UAEaG,cAAc,CAACb,UAAkB,EAAqB;QACjE,MAAMc,kBAAkB,GAAa,MAAM,IAAI,CAACjB,QAAQ,CAACkB,iBAAiB,CAACf,UAAU,CAAC,AAAC;QACvF,IAAI,CAACc,kBAAkB,EAAE,MAAM,IAAIZ,cAAa,cAAA,CAAC,GAAG,EAAE,wBAAwB,CAAC,CAAC;QAEhF,OAAOY,kBAAkB,CAAC;IAC5B;;QAtCA,KAAOjB,QAAQ,GAAGmB,cAAa,QAAA,AAAC,CAAA;;CAuCjC;MAED,QAA+B,GAAhBrB,eAAe"}