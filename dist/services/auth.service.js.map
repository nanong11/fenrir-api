{"version":3,"sources":["../../src/services/auth.service.ts"],"sourcesContent":["import { hash, compare } from 'bcrypt';\nimport { sign } from 'jsonwebtoken';\nimport { SECRET_KEY } from '@config';\nimport { CreateUserDto } from '@dtos/users.dto';\nimport { HttpException } from '@exceptions/HttpException';\nimport { DataStoredInToken, TokenData } from '@interfaces/auth.interface';\nimport { User } from '@interfaces/users.interface';\nimport userModel from '@models/users.model';\nimport { isEmpty } from '@utils/util';\n\nclass AuthService {\n  public users = userModel;\n\n  public async signup(userData: CreateUserDto): Promise<User> {\n    if (isEmpty(userData)) throw new HttpException(400, 'userData is empty');\n\n    const findUserEmail: User = await this.users.findOne({ email: userData.email });\n    if (findUserEmail) throw new HttpException(409, `This email ${userData.email} already exists`);\n\n    const findUserMobile: User = await this.users.findOne({ mobile: userData.mobile });\n    if (findUserMobile) throw new HttpException(409, `This mobile ${userData.mobile} already exists`);\n\n    const hashedPassword = await hash(userData.password, 10);\n    const createUserData: User = await this.users.create({ ...userData, password: hashedPassword });\n\n    return createUserData;\n  }\n\n  public async login(userData: CreateUserDto): Promise<{ cookie: string; findUser: User }> {\n    if (isEmpty(userData)) throw new HttpException(400, 'userData is empty');\n\n    if (userData.mobile) {\n      const findUser: User = await this.users.findOne({ mobile: userData.mobile });\n      if (!findUser) throw new HttpException(404, `This mobile ${userData.mobile} was not found`);\n\n      const isPasswordMatching: boolean = await compare(userData.password, findUser.password);\n      if (!isPasswordMatching) throw new HttpException(401, 'Password is not matching');\n\n      const tokenData = this.createToken(findUser);\n      const cookie = this.createCookie(tokenData);\n\n      return { cookie, findUser };\n    } else {\n      const findUser: User = await this.users.findOne({ email: userData.email });\n      if (!findUser) throw new HttpException(404, `This email ${userData.email} was not found`);\n\n      const isPasswordMatching: boolean = await compare(userData.password, findUser.password);\n      if (!isPasswordMatching) throw new HttpException(401, 'Password is not matching');\n\n      const tokenData = this.createToken(findUser);\n      const cookie = this.createCookie(tokenData);\n\n      return { cookie, findUser };\n    }\n  }\n\n  public async logout(userData: User): Promise<User> {\n    if (isEmpty(userData)) throw new HttpException(400, 'userData is empty');\n\n    const findUser: User = await this.users.findOne({ email: userData.email, password: userData.password });\n    if (!findUser) throw new HttpException(404, `This email ${userData.email} was not found`);\n\n    return findUser;\n  }\n\n  public async findUserData(userData: User): Promise<User> {\n    if (isEmpty(userData)) throw new HttpException(400, 'userData is empty');\n\n    if (userData) {\n      const findUser: User = await this.users.findOne({ email: userData.email, mobile: userData.mobile });\n      if (!findUser) throw new HttpException(404, `No user found`);\n\n      return findUser;\n    }\n  }\n\n  public createToken(user: User): TokenData {\n    const dataStoredInToken: DataStoredInToken = { _id: user._id };\n    const secretKey: string = SECRET_KEY;\n    const expiresIn: number = 60 * 60;\n\n    return { expiresIn, token: sign(dataStoredInToken, secretKey, { expiresIn }) };\n  }\n\n  public createCookie(tokenData: TokenData): string {\n    return `Authorization=${tokenData.token}; HttpOnly; Max-Age=${tokenData.expiresIn};`;\n  }\n}\n\nexport default AuthService;\n"],"names":["AuthService","signup","userData","isEmpty","HttpException","findUserEmail","users","findOne","email","findUserMobile","mobile","hashedPassword","hash","password","createUserData","create","login","findUser","isPasswordMatching","compare","tokenData","createToken","cookie","createCookie","logout","findUserData","user","dataStoredInToken","_id","secretKey","SECRET_KEY","expiresIn","token","sign","userModel"],"mappings":"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"}